"""
Herramienta de an√°lisis de sentimientos usando modelos locales
"""

import logging
from typing import Optional
try:
    from transformers import pipeline
    HF_AVAILABLE = True
except ImportError:
    HF_AVAILABLE = False

from .base import BaseTool

logger = logging.getLogger(__name__)

class SentimentAnalyzerTool(BaseTool):
    """Herramienta para analizar sentimientos en texto"""
    
    def __init__(self):
        super().__init__(
            name="sentiment_analyzer",
            description="Analizar el sentimiento (positivo, negativo, neutral) de un texto. "
                       "√ötil para an√°lisis de opiniones, reviews, comentarios, etc."
        )
        self.pipeline = None
        self._initialize_model()
        
    def _initialize_model(self):
        """Inicializar el modelo de an√°lisis de sentimientos"""
        try:
            if HF_AVAILABLE:
                # Modelo liviano en espa√±ol
                self.pipeline = pipeline(
                    "sentiment-analysis",
                    model="nlptown/bert-base-multilingual-uncased-sentiment",
                    return_all_scores=True
                )
                logger.info("‚úÖ Modelo de sentimientos inicializado")
            else:
                logger.warning("‚ö†Ô∏è Transformers no disponible - usando an√°lisis mock")
        except Exception as e:
            logger.error(f"‚ùå Error inicializando modelo de sentimientos: {e}")
            self.pipeline = None

    async def execute(self, text: str) -> str:
        """Analizar sentimiento del texto"""
        try:
            if not text.strip():
                return "‚ùå Error: Texto vac√≠o para analizar"
            
            if self.pipeline is None:
                # An√°lisis mock b√°sico (para casos sin modelo)
                return self._mock_sentiment_analysis(text)
            
            # An√°lisis real con modelo
            results = self.pipeline(text)
            
            # Procesar resultados
            analysis = self._format_sentiment_results(text, results[0])
            
            logger.info(f"üß† An√°lisis de sentimiento completado para texto: {text[:50]}...")
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Error en an√°lisis de sentimientos: {e}")
            return f"‚ùå Error analizando sentimiento: {str(e)}"
    
    def _mock_sentiment_analysis(self, text: str) -> str:
        """An√°lisis mock b√°sico usando palabras clave"""
        text_lower = text.lower()
        
        # Palabras positivas y negativas b√°sicas
        positive_words = ['excelente', 'genial', 'bueno', 'fant√°stico', 'incre√≠ble', 'love', 'great', 'amazing', 'good', 'excellent']
        negative_words = ['malo', 'terrible', 'horrible', 'p√©simo', 'awful', 'bad', 'terrible', 'horrible', 'hate', 'worst']
        
        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)
        
        if positive_count > negative_count:
            sentiment = "POSITIVO ‚úÖ"
            confidence = min(0.6 + (positive_count * 0.1), 0.95)
        elif negative_count > positive_count:
            sentiment = "NEGATIVO ‚ùå"
            confidence = min(0.6 + (negative_count * 0.1), 0.95)
        else:
            sentiment = "NEUTRAL ‚ö™"
            confidence = 0.5
        
        return f"""üìä **AN√ÅLISIS DE SENTIMIENTO** (Mock)

üìù **Texto analizado**: "{text[:100]}{'...' if len(text) > 100 else ''}"
üéØ **Sentimiento**: {sentiment}
üìà **Confianza**: {confidence:.1%}
üîç **M√©todo**: An√°lisis de palabras clave b√°sico

‚ö†Ô∏è **Nota**: Este es un an√°lisis b√°sico. Para mayor precisi√≥n, instala 'transformers'."""

    def _format_sentiment_results(self, text: str, results: list) -> str:
        """Formatear resultados del modelo real"""
        # Encontrar el sentimiento con mayor score
        best_result = max(results, key=lambda x: x['score'])
        
        # Mapear etiquetas del modelo a espa√±ol
        label_map = {
            'POSITIVE': 'POSITIVO ‚úÖ',
            'NEGATIVE': 'NEGATIVO ‚ùå', 
            'NEUTRAL': 'NEUTRAL ‚ö™',
            '1 star': 'MUY NEGATIVO ‚ùå‚ùå',
            '2 stars': 'NEGATIVO ‚ùå',
            '3 stars': 'NEUTRAL ‚ö™',
            '4 stars': 'POSITIVO ‚úÖ',
            '5 stars': 'MUY POSITIVO ‚úÖ‚úÖ'
        }
        
        sentiment_label = label_map.get(best_result['label'], best_result['label'])
        confidence = best_result['score']
        
        # Crear resumen detallado
        all_scores = "\n".join([
            f"   ‚Ä¢ {label_map.get(r['label'], r['label'])}: {r['score']:.1%}"
            for r in sorted(results, key=lambda x: x['score'], reverse=True)
        ])
        
        return f"""üìä **AN√ÅLISIS DE SENTIMIENTO**

üìù **Texto analizado**: "{text[:100]}{'...' if len(text) > 100 else ''}"
üéØ **Sentimiento principal**: {sentiment_label}
üìà **Confianza**: {confidence:.1%}

üìã **Todos los scores**:
{all_scores}

ü§ñ **Modelo**: bert-base-multilingual-uncased-sentiment"""

    def health_check(self) -> bool:
        """Verificar si la herramienta est√° funcionando"""
        try:
            # Test b√°sico
            test_result = "Funcional" if HF_AVAILABLE else "Mock mode"
            return True
        except Exception as e:
            logger.error(f"‚ùå Health check failed para sentiment_analyzer: {e}")
            return False 